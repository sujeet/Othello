/*
* @file botTemplate.cpp
* @author Arun Tejasvi Chaganty <arunchaganty@gmail.com>
* @date 2010-02-04
* Template for users to create their own bots
*/

#include "Othello.h"
#include "OthelloBoard.h"
#include "OthelloPlayer.h"
#include <cstdlib>
using namespace std;
using namespace Desdemona;

class MyBot: public OthelloPlayer
{
    public:
        /**
         * Initialisation routines here
         * This could do anything from open up a cache of "best moves" to
         * spawning a background processing thread. 
         */
        MyBot( Turn turn );

        /**
         * Play something 
         */
        virtual Move play( const OthelloBoard& board );
    private:
};

MyBot::MyBot( Turn turn )
    : OthelloPlayer( turn )
{
}

Move MyBot::play( const OthelloBoard& board )
{
    list<Move> moves = board.getValidMoves( turn );
    list<Move>::iterator it = moves.begin();
    if (this->turn == BLACK) cout << "black\n";
    if (this->turn == RED) cout << "red\n";
    
    Move final_move = *it;
    int max_score = 0;
    for (; it != moves.end(); ++it) {
         // Simulate a move, and choose which maximizes your coin count.
         OthelloBoard test_board (board);
         test_board.makeMove (this->turn, *it);

         int score = this->minMax (test_board,
                                   this->turn,
                                   3);

         if (score > max_score) {
              max_score = score;
              final_move = *it;
         }
    }
    

    return final_move;
}

// Returns the minMax value of a node (which is a board in this case)
// Our goal is to choose the node with maximum value among all the nodes
// at each step.
// I mean, even min step can be thought as max step from the other player's
// viwepoint.
int MyBot::minMax (const OthelloBoard & board,
                   Turn turn,
                   int depth) 
{
     

// The following lines are _very_ important to create a bot module for Desdemona

extern "C" {
    OthelloPlayer* createBot( Turn turn )
    {
        return new MyBot( turn );
    }

    void destroyBot( OthelloPlayer* bot )
    {
        delete bot;
    }
}


